{"ast":null,"code":"var _jsxFileName = \"/home/ductran/Desktop/CSC480-21F/frontend/src/main/frontend/src/components/CustomizedPdfUploader.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Stack, Typography } from \"@mui/material\"; // nodejs library to set properties for components\n\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\"; // style\n\nimport ButtonStyle from \"../styles/ButtonStyle\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CustomizedPdfUploader(props) {\n  _s();\n\n  const {\n    id,\n    pdfFileName,\n    setPdfFileName,\n    setPdfFile,\n    multiplePdf,\n    ...rest\n  } = props; // Styles\n\n  const classes = ButtonStyle();\n  const inputStyleClasses = classNames({\n    [classes.displayNone]: true\n  });\n  const uploadBtnClasses = classNames({\n    [classes.type1]: true,\n    [classes.height1]: true,\n    [classes.root]: true\n  }); //=========== Handle Submission\n\n  const [pdfFileError, setPdfFileError] = useState(\"\");\n  const [fileName, setFileName] = useState(\"\");\n  useEffect(() => {\n    if (pdfFileName !== undefined) {\n      setFileName(pdfFileName);\n    }\n  }, [pdfFileName]);\n  const fileType = [\"application/pdf\"];\n\n  const handlePdfFileChange = e => {\n    let arrayPdfFiles = [];\n\n    for (let i = 0; i < e.target.files.length; i++) {\n      let selectedFile = e.target.files[i];\n\n      if (selectedFile) {\n        if (selectedFile && fileType.includes(selectedFile.type)) {\n          setFileName(selectedFile.name);\n\n          if (pdfFileName !== undefined) {\n            setPdfFileName(selectedFile.name);\n          }\n\n          let reader = new FileReader(); //reader.readAsDataURL(selectedFile);\n\n          reader.readAsArrayBuffer(selectedFile);\n\n          reader.onloadend = e => {\n            let unit8Array = new Int8Array(e.target.result);\n            let byteArray = unit8Array.toString().split(\",\").map(Number);\n\n            if (multiplePdf) {\n              arrayPdfFiles = [...arrayPdfFiles, byteArray];\n              setPdfFile(arrayPdfFiles);\n              setPdfFileError(\"\");\n            } else {\n              setPdfFile(byteArray);\n              setPdfFileError(\"\");\n            }\n          };\n        } else {\n          setPdfFile(null);\n          setPdfFileError(\"Please select valid pdf file\");\n        }\n      } else {\n        console.log(\"select your file\");\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Stack, {\n      direction: \"row\",\n      spacing: 3,\n      alignItems: \"center\",\n      children: [multiplePdf === true ? /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        id: id,\n        accept: \"application/pdf\",\n        class: \"inputfile\",\n        multiple: true,\n        className: inputStyleClasses,\n        onChange: handlePdfFileChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        id: id,\n        accept: \"application/pdf\",\n        class: \"inputfile\",\n        className: inputStyleClasses,\n        onChange: handlePdfFileChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        for: id,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          id: \"file-name\",\n          class: \"file-box\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          class: uploadBtnClasses,\n          children: \"Upload PDF file\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        style: {\n          display: \"flex\",\n          textAlign: \"center\",\n          fontWeight: \"500\"\n        },\n        variant: \"body1\",\n        component: \"div\",\n        children: fileName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CustomizedPdfUploader, \"ytCZGebsi0eJeBGQBbt7Px/ePgM=\");\n\n_c = CustomizedPdfUploader;\nCustomizedPdfUploader.propTypes = {\n  multiplePdf: PropTypes.bool\n};\nexport default CustomizedPdfUploader;\n\nvar _c;\n\n$RefreshReg$(_c, \"CustomizedPdfUploader\");","map":{"version":3,"sources":["/home/ductran/Desktop/CSC480-21F/frontend/src/main/frontend/src/components/CustomizedPdfUploader.js"],"names":["React","useState","useEffect","Stack","Typography","PropTypes","classNames","ButtonStyle","CustomizedPdfUploader","props","id","pdfFileName","setPdfFileName","setPdfFile","multiplePdf","rest","classes","inputStyleClasses","displayNone","uploadBtnClasses","type1","height1","root","pdfFileError","setPdfFileError","fileName","setFileName","undefined","fileType","handlePdfFileChange","e","arrayPdfFiles","i","target","files","length","selectedFile","includes","type","name","reader","FileReader","readAsArrayBuffer","onloadend","unit8Array","Int8Array","result","byteArray","toString","split","map","Number","console","log","display","textAlign","fontWeight","propTypes","bool"],"mappings":"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","sourcesContent":["import React, { useState , useEffect} from \"react\";\nimport { Stack, Typography } from \"@mui/material\";\n// nodejs library to set properties for components\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\n// style\nimport ButtonStyle from \"../styles/ButtonStyle\";\n\nfunction CustomizedPdfUploader(props) {\n  const { id, pdfFileName, setPdfFileName, setPdfFile, multiplePdf, ...rest } =\n    props;\n\n  // Styles\n  const classes = ButtonStyle();\n\n  const inputStyleClasses = classNames({\n    [classes.displayNone]: true,\n  });\n\n  const uploadBtnClasses = classNames({\n    [classes.type1]: true,\n    [classes.height1]: true,\n    [classes.root]: true,\n  });\n\n  //=========== Handle Submission\n  const [pdfFileError, setPdfFileError] = useState(\"\");\n  const [fileName, setFileName] = useState(\"\");\n\n  useEffect(() => {\n    if (pdfFileName !== undefined) {\n      setFileName(pdfFileName);\n    }\n  }, [pdfFileName]);\n\n  const fileType = [\"application/pdf\"];\n  const handlePdfFileChange = (e) => {\n    let arrayPdfFiles = [];\n    for (let i = 0; i < e.target.files.length; i++) {\n      let selectedFile = e.target.files[i];\n      if (selectedFile) {\n        if (selectedFile && fileType.includes(selectedFile.type)) {\n          setFileName(selectedFile.name);\n           \n          if(pdfFileName !== undefined)\n          {\n             \n              setPdfFileName(selectedFile.name);\n          }\n        \n        \n          let reader = new FileReader();\n          //reader.readAsDataURL(selectedFile);\n          reader.readAsArrayBuffer(selectedFile);\n          reader.onloadend = (e) => {\n            let unit8Array = new Int8Array(e.target.result);\n            let byteArray = unit8Array.toString().split(\",\").map(Number);\n           \n            if (multiplePdf) {\n              arrayPdfFiles = [...arrayPdfFiles, byteArray];\n              setPdfFile(arrayPdfFiles);\n              setPdfFileError(\"\");\n            } else {\n              setPdfFile(byteArray);\n              setPdfFileError(\"\");\n            }\n          };\n        } else {\n          setPdfFile(null);\n          setPdfFileError(\"Please select valid pdf file\");\n        }\n      } else {\n        console.log(\"select your file\");\n      }\n    }\n  };\n\n  return (\n    <div>\n      <Stack direction=\"row\" spacing={3} alignItems=\"center\">\n        {multiplePdf === true ? (\n          <input\n            type=\"file\"\n            id={id}\n            accept=\"application/pdf\"\n            class=\"inputfile\"\n            multiple\n            className={inputStyleClasses}\n            onChange={handlePdfFileChange}\n          />\n        ) : (\n          <input\n            type=\"file\"\n            id={id}\n            accept=\"application/pdf\"\n            class=\"inputfile\"\n            className={inputStyleClasses}\n            onChange={handlePdfFileChange}\n          />\n        )}\n\n        <label for={id}>\n          <span id=\"file-name\" class=\"file-box\"></span>\n          <span class={uploadBtnClasses}>Upload PDF file</span>\n        </label>\n        <Typography\n          style={{\n            display: \"flex\",\n            textAlign: \"center\",\n            fontWeight: \"500\",\n          }}\n          variant=\"body1\"\n          component=\"div\"\n        >\n          {fileName}\n        </Typography>\n      </Stack>\n    </div>\n  );\n\n\n}\n  CustomizedPdfUploader.propTypes = {\n    multiplePdf: PropTypes.bool,\n  };\nexport default CustomizedPdfUploader;\n"]},"metadata":{},"sourceType":"module"}