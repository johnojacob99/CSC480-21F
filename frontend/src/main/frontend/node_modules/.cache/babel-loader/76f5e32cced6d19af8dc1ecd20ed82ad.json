{"ast":null,"code":"var _jsxFileName = \"/home/ductran/Desktop/CSC480-21F/frontend/src/main/frontend/src/components/CustomizedCSVUploader.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Stack, Typography } from \"@mui/material\"; // nodejs library to set properties for components\n\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\"; // style\n\nimport ButtonStyle from \"../styles/ButtonStyle\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CustomizedCSVUploader(props) {\n  _s();\n\n  const {\n    setCSVFile,\n    multipleCSV,\n    ...rest\n  } = props; // Styles\n\n  const classes = ButtonStyle();\n  const inputStyleClasses = classNames({\n    [classes.root]: true,\n    [classes.displayNone]: true\n  });\n  const uploadBtnClasses = classNames({\n    [classes.type1]: true,\n    [classes.height3]: true,\n    [classes.root]: true\n  }); //=========== Handle Submission\n\n  const [pdfFileError, setPdfFileError] = useState(\"\");\n  const [fileName, setFileName] = useState(\"\");\n  const fileType = [\"text/csv\"];\n\n  const handlePdfFileChange = e => {\n    let arrayPdfFiles = [];\n    console.log(e.target.files);\n\n    for (let i = 0; i < e.target.files.length; i++) {\n      console.log(e.target.files[i]);\n      let selectedFile = e.target.files[i];\n\n      if (selectedFile) {\n        if (selectedFile && fileType.includes(selectedFile.type)) {\n          setFileName(selectedFile.name);\n          let reader = new FileReader(); //reader.readAsDataURL(selectedFile);\n\n          reader.readAsText(selectedFile);\n\n          reader.onloadend = e => {\n            //let unit8Array = new Uint8Array(e.target.result);\n            let text = e.target.result; //unit8Array//.split(',')\n\n            var lines = text.toString().split(\"\\n\");\n            var result = [];\n            var headers = lines[0].split(\",\");\n\n            for (var i = 1; i < lines.length - 1; i++) {\n              var obj = {};\n              var currentline = lines[i].split(\",\");\n\n              for (var j = 0; j < headers.length; j++) {\n                obj[headers[j]] = currentline[j];\n              }\n\n              result.push(obj);\n            }\n\n            if (multipleCSV) {\n              arrayPdfFiles = [...arrayPdfFiles, result];\n              setCSVFile(arrayPdfFiles);\n              setPdfFileError(\"\");\n            } else {\n              setCSVFile(result);\n              setPdfFileError(\"\");\n            }\n          };\n        } else {\n          setCSVFile(null);\n          setPdfFileError(\"Please select valid csv file\");\n        }\n      } else {\n        console.log(\"select your file\");\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Stack, {\n      direction: \"row\",\n      spacing: 3,\n      children: [multipleCSV === true ? /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        id: \"file\",\n        accept: \".csv\",\n        class: \"inputfile\",\n        multiple: true,\n        className: inputStyleClasses,\n        onChange: handlePdfFileChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        id: \"file\",\n        accept: \".csv\",\n        class: \"inputfile\",\n        className: inputStyleClasses,\n        onChange: handlePdfFileChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"file\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          id: \"file-name\",\n          class: \"file-box\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          class: uploadBtnClasses,\n          children: \"Upload CSV file\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        style: {\n          display: \"flex\",\n          textAlign: \"center\",\n          fontWeight: \"500\"\n        },\n        variant: \"h6\",\n        component: \"div\",\n        children: fileName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CustomizedCSVUploader, \"ElgVWfrRKkt4DXGkEeiSkzrvRKU=\");\n\n_c = CustomizedCSVUploader;\nCustomizedCSVUploader.propTypes = {\n  multipleCSV: PropTypes.bool\n};\nexport default CustomizedCSVUploader;\n\nvar _c;\n\n$RefreshReg$(_c, \"CustomizedCSVUploader\");","map":{"version":3,"sources":["/home/ductran/Desktop/CSC480-21F/frontend/src/main/frontend/src/components/CustomizedCSVUploader.js"],"names":["React","useState","Stack","Typography","PropTypes","classNames","ButtonStyle","CustomizedCSVUploader","props","setCSVFile","multipleCSV","rest","classes","inputStyleClasses","root","displayNone","uploadBtnClasses","type1","height3","pdfFileError","setPdfFileError","fileName","setFileName","fileType","handlePdfFileChange","e","arrayPdfFiles","console","log","target","files","i","length","selectedFile","includes","type","name","reader","FileReader","readAsText","onloadend","text","result","lines","toString","split","headers","obj","currentline","j","push","display","textAlign","fontWeight","propTypes","bool"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Stack, Typography } from \"@mui/material\";\n// nodejs library to set properties for components\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\n// style\nimport ButtonStyle from \"../styles/ButtonStyle\";\n\nfunction CustomizedCSVUploader(props) {\n  const { setCSVFile, multipleCSV, ...rest } = props;\n\n  // Styles\n  const classes = ButtonStyle();\n\n  const inputStyleClasses = classNames({\n    [classes.root]: true,\n    [classes.displayNone]: true,\n  });\n\n  const uploadBtnClasses = classNames({\n    [classes.type1]: true,\n    [classes.height3]: true,\n    [classes.root]: true,\n  });\n\n  //=========== Handle Submission\n  const [pdfFileError, setPdfFileError] = useState(\"\");\n  const [fileName, setFileName] = useState(\"\");\n\n  const fileType = [\"text/csv\"];\n  const handlePdfFileChange = (e) => {\n    let arrayPdfFiles = []\n    console.log(e.target.files)\n    for (let i = 0; i < e.target.files.length; i++) {\n      console.log(e.target.files[i]);\n      let selectedFile = e.target.files[i];\n      if (selectedFile) {\n        if (selectedFile && fileType.includes(selectedFile.type)) {\n          setFileName(selectedFile.name);\n          let reader = new FileReader();\n          //reader.readAsDataURL(selectedFile);\n          reader.readAsText(selectedFile);\n          reader.onloadend = (e) => {\n            //let unit8Array = new Uint8Array(e.target.result);\n            let text = e.target.result//unit8Array//.split(',')\n            var lines = text.toString().split(\"\\n\")\n            var result = [];\n            var headers=lines[0].split(\",\");\n            for(var i=1;i<lines.length-1;i++){\n\n              var obj = {};\n              var currentline=lines[i].split(\",\");\n              for(var j=0;j<headers.length;j++){\n                obj[headers[j]] = currentline[j];\n            }\n              result.push(obj);\n            }\n            \n            if(multipleCSV){\n              arrayPdfFiles = [...arrayPdfFiles,result]\n              setCSVFile(arrayPdfFiles);\n              setPdfFileError(\"\");\n            }\n            else{\n                setCSVFile(result);\n              setPdfFileError(\"\");\n            }\n            \n          };\n        } else {\n            setCSVFile(null);\n          setPdfFileError(\"Please select valid csv file\");\n        }\n      } else {\n        console.log(\"select your file\");\n      }\n    }\n  };\n\n  return (\n    <div>\n      <Stack direction=\"row\" spacing={3}>\n        {multipleCSV === true ? (\n          <input\n            type=\"file\"\n            id=\"file\"\n            accept=\".csv\"\n            class=\"inputfile\"\n            multiple\n            className={inputStyleClasses}\n            onChange={handlePdfFileChange}\n          />\n        ) : (\n          <input\n            type=\"file\"\n            id=\"file\"\n            accept=\".csv\"\n            class=\"inputfile\"\n            className={inputStyleClasses}\n            onChange={handlePdfFileChange}\n          />\n        )}\n\n        <label for=\"file\">\n          <span id=\"file-name\" class=\"file-box\"></span>\n          <span class={uploadBtnClasses}>Upload CSV file</span>\n        </label>\n        <Typography\n          style={{\n            display: \"flex\",\n            textAlign: \"center\",\n            fontWeight: \"500\",\n          }}\n          variant=\"h6\"\n          component=\"div\"\n        >\n          {fileName}\n        </Typography>\n      </Stack>\n    </div>\n  );\n\n\n}\n  CustomizedCSVUploader.propTypes = {\n    multipleCSV: PropTypes.bool,\n  };\nexport default CustomizedCSVUploader;\n"]},"metadata":{},"sourceType":"module"}