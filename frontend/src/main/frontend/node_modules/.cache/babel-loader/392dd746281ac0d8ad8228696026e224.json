{"ast":null,"code":"import _toConsumableArray from\"/home/ductran/guide-rest-client-reactjs/start/src/main/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/home/ductran/guide-rest-client-reactjs/start/src/main/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _defineProperty from\"/home/ductran/guide-rest-client-reactjs/start/src/main/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectWithoutProperties from\"/home/ductran/guide-rest-client-reactjs/start/src/main/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";var _excluded=[\"id\",\"pdfFileName\",\"setPdfFileName\",\"setPdfFile\",\"multiplePdf\"];import React,{useState,useEffect}from\"react\";import{Stack,Typography}from\"@mui/material\";// nodejs library to set properties for components\nimport classNames from\"classnames\";// style\nimport ButtonStyle from\"../styles/ButtonStyle\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function CustomizedPdfUploader(props){var _classNames2;var id=props.id,pdfFileName=props.pdfFileName,setPdfFileName=props.setPdfFileName,setPdfFile=props.setPdfFile,multiplePdf=props.multiplePdf,rest=_objectWithoutProperties(props,_excluded);// Styles\nvar classes=ButtonStyle();var inputStyleClasses=classNames(_defineProperty({},classes.displayNone,true));var uploadBtnClasses=classNames((_classNames2={},_defineProperty(_classNames2,classes.type1,true),_defineProperty(_classNames2,classes.height1,true),_defineProperty(_classNames2,classes.root,true),_classNames2));//=========== Handle Submission\nvar _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),pdfFileError=_useState2[0],setPdfFileError=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),fileName=_useState4[0],setFileName=_useState4[1];useEffect(function(){if(pdfFileName!==undefined){setFileName(pdfFileName);}},[pdfFileName]);var fileType=[\"application/pdf\"];var handlePdfFileChange=function handlePdfFileChange(e){var arrayPdfFiles=[];for(var i=0;i<e.target.files.length;i++){var selectedFile=e.target.files[i];if(selectedFile){if(selectedFile&&fileType.includes(selectedFile.type)){setFileName(selectedFile.name);if(pdfFileName!==undefined){setPdfFileName(selectedFile.name);}var reader=new FileReader();//reader.readAsDataURL(selectedFile);\nreader.readAsArrayBuffer(selectedFile);reader.onloadend=function(e){var unit8Array=new Int8Array(e.target.result);var byteArray=unit8Array.toString().split(\",\").map(Number);if(multiplePdf){arrayPdfFiles=[].concat(_toConsumableArray(arrayPdfFiles),[byteArray]);setPdfFile(arrayPdfFiles);setPdfFileError(\"\");}else{setPdfFile(byteArray);setPdfFileError(\"\");}};}else{setPdfFile(null);setPdfFileError(\"Please select valid pdf file\");}}else{console.log(\"select your file\");}}};return/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(Stack,{direction:\"row\",spacing:3,alignItems:\"center\",children:[multiplePdf===true?/*#__PURE__*/_jsx(\"input\",{type:\"file\",id:id,accept:\"application/pdf\",class:\"inputfile\",multiple:true,className:inputStyleClasses,onChange:handlePdfFileChange}):/*#__PURE__*/_jsx(\"input\",{type:\"file\",id:id,accept:\"application/pdf\",class:\"inputfile\",className:inputStyleClasses,onChange:handlePdfFileChange}),/*#__PURE__*/_jsxs(\"label\",{for:id,children:[/*#__PURE__*/_jsx(\"span\",{id:\"file-name\",class:\"file-box\"}),/*#__PURE__*/_jsx(\"span\",{class:uploadBtnClasses,children:\"Upload PDF file\"})]}),/*#__PURE__*/_jsx(Typography,{style:{display:\"flex\",textAlign:\"center\",fontWeight:\"500\"},variant:\"body1\",component:\"div\",children:fileName})]})});}export default CustomizedPdfUploader;","map":{"version":3,"sources":["/home/ductran/guide-rest-client-reactjs/start/src/main/frontend/src/components/CustomizedPdfUploader.js"],"names":["React","useState","useEffect","Stack","Typography","classNames","ButtonStyle","CustomizedPdfUploader","props","id","pdfFileName","setPdfFileName","setPdfFile","multiplePdf","rest","classes","inputStyleClasses","displayNone","uploadBtnClasses","type1","height1","root","pdfFileError","setPdfFileError","fileName","setFileName","undefined","fileType","handlePdfFileChange","e","arrayPdfFiles","i","target","files","length","selectedFile","includes","type","name","reader","FileReader","readAsArrayBuffer","onloadend","unit8Array","Int8Array","result","byteArray","toString","split","map","Number","console","log","display","textAlign","fontWeight"],"mappings":"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","sourcesContent":["import React, { useState , useEffect} from \"react\";\nimport { Stack, Typography } from \"@mui/material\";\n// nodejs library to set properties for components\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\n// style\nimport ButtonStyle from \"../styles/ButtonStyle\";\n\nfunction CustomizedPdfUploader(props) {\n  const { id, pdfFileName, setPdfFileName, setPdfFile, multiplePdf, ...rest } =\n    props;\n\n  // Styles\n  const classes = ButtonStyle();\n\n  const inputStyleClasses = classNames({\n    [classes.displayNone]: true,\n  });\n\n  const uploadBtnClasses = classNames({\n    [classes.type1]: true,\n    [classes.height1]: true,\n    [classes.root]: true,\n  });\n\n  //=========== Handle Submission\n  const [pdfFileError, setPdfFileError] = useState(\"\");\n  const [fileName, setFileName] = useState(\"\");\n\n  useEffect(() => {\n    if (pdfFileName !== undefined) {\n      setFileName(pdfFileName);\n    }\n  }, [pdfFileName]);\n\n  const fileType = [\"application/pdf\"];\n  const handlePdfFileChange = (e) => {\n    let arrayPdfFiles = [];\n    for (let i = 0; i < e.target.files.length; i++) {\n      let selectedFile = e.target.files[i];\n      if (selectedFile) {\n        if (selectedFile && fileType.includes(selectedFile.type)) {\n          setFileName(selectedFile.name);\n           \n          if(pdfFileName !== undefined)\n          {\n             \n              setPdfFileName(selectedFile.name);\n          }\n        \n        \n          let reader = new FileReader();\n          //reader.readAsDataURL(selectedFile);\n          reader.readAsArrayBuffer(selectedFile);\n          reader.onloadend = (e) => {\n            let unit8Array = new Int8Array(e.target.result);\n            let byteArray = unit8Array.toString().split(\",\").map(Number);\n           \n            if (multiplePdf) {\n              arrayPdfFiles = [...arrayPdfFiles, byteArray];\n              setPdfFile(arrayPdfFiles);\n              setPdfFileError(\"\");\n            } else {\n              setPdfFile(byteArray);\n              setPdfFileError(\"\");\n            }\n          };\n        } else {\n          setPdfFile(null);\n          setPdfFileError(\"Please select valid pdf file\");\n        }\n      } else {\n        console.log(\"select your file\");\n      }\n    }\n  };\n\n  return (\n    <div>\n      <Stack direction=\"row\" spacing={3} alignItems=\"center\">\n        {multiplePdf === true ? (\n          <input\n            type=\"file\"\n            id={id}\n            accept=\"application/pdf\"\n            class=\"inputfile\"\n            multiple\n            className={inputStyleClasses}\n            onChange={handlePdfFileChange}\n          />\n        ) : (\n          <input\n            type=\"file\"\n            id={id}\n            accept=\"application/pdf\"\n            class=\"inputfile\"\n            className={inputStyleClasses}\n            onChange={handlePdfFileChange}\n          />\n        )}\n\n        <label for={id}>\n          <span id=\"file-name\" class=\"file-box\"></span>\n          <span class={uploadBtnClasses}>Upload PDF file</span>\n        </label>\n        <Typography\n          style={{\n            display: \"flex\",\n            textAlign: \"center\",\n            fontWeight: \"500\",\n          }}\n          variant=\"body1\"\n          component=\"div\"\n        >\n          {fileName}\n        </Typography>\n      </Stack>\n    </div>\n  );\n\n\n}\n  CustomizedPdfUploader.propTypes = {\n    multiplePdf: PropTypes.bool,\n  };\nexport default CustomizedPdfUploader;\n"]},"metadata":{},"sourceType":"module"}