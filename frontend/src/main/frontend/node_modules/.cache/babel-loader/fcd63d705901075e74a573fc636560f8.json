{"ast":null,"code":"import b64toBlob from\"b64-to-blob\";export var base64ArrayBuffer=function base64ArrayBuffer(arrayBuffer){var base64=\"\";var encodings=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";var bytes=new Uint8Array(arrayBuffer);var byteLength=bytes.byteLength;var byteRemainder=byteLength%3;var mainLength=byteLength-byteRemainder;var a,b,c,d;var chunk;// Main loop deals with bytes in chunks of 3\nfor(var i=0;i<mainLength;i=i+3){// Combine the three bytes into a single integer\nchunk=bytes[i]<<16|bytes[i+1]<<8|bytes[i+2];// Use bitmasks to extract 6-bit segments from the triplet\na=(chunk&16515072)>>18;// 16515072 = (2^6 - 1) << 18\nb=(chunk&258048)>>12;// 258048   = (2^6 - 1) << 12\nc=(chunk&4032)>>6;// 4032     = (2^6 - 1) << 6\nd=chunk&63;// 63       = 2^6 - 1\n// Convert the raw binary segments to the appropriate ASCII encoding\nbase64+=encodings[a]+encodings[b]+encodings[c]+encodings[d];}// Deal with the remaining bytes and padding\nif(byteRemainder===1){chunk=bytes[mainLength];a=(chunk&252)>>2;// 252 = (2^6 - 1) << 2\n// Set the 4 least significant bits to zero\nb=(chunk&3)<<4;// 3   = 2^2 - 1\nbase64+=encodings[a]+encodings[b]+\"==\";}else if(byteRemainder===2){chunk=bytes[mainLength]<<8|bytes[mainLength+1];a=(chunk&64512)>>10;// 64512 = (2^6 - 1) << 10\nb=(chunk&1008)>>4;// 1008  = (2^6 - 1) << 4\n// Set the 2 least significant bits to zero\nc=(chunk&15)<<2;// 15    = 2^4 - 1\nbase64+=encodings[a]+encodings[b]+encodings[c]+\"=\";}return base64;};var openNewTab=function openNewTab(response){var contentType=\"application/pdf\";var sliceSize=512;var byteCharacters=atob(response);var byteArrays=[];for(var offset=0;offset<byteCharacters.length;offset+=sliceSize){var slice=byteCharacters.slice(offset,offset+sliceSize);var byteNumbers=new Array(slice.length);for(var i=0;i<slice.length;i++){byteNumbers[i]=slice.charCodeAt(i);}var byteArray=new Uint8Array(byteNumbers);byteArrays.push(byteArray);}var blob=new Blob(byteArrays,{type:contentType});blob=b64toBlob(response,contentType);var blobUrl=URL.createObjectURL(blob);return blobUrl;};export var handleConvertByteArrayToPdf=function handleConvertByteArrayToPdf(byteArr){if(byteArr===\"\"){alert(\"Input must not be empty !\");}else{var data=byteArr.toString().trim().replace(/ /g,\"\");data.replace(/\\r?\\n|\\r/g,\"\");var arrData=JSON.parse(\"[\"+data+\"]\");var base64=base64ArrayBuffer(arrData);return openNewTab(base64);}};","map":{"version":3,"sources":["/home/ductran/guide-rest-client-reactjs/start/src/main/frontend/src/utils/byteArrayToPDF.js"],"names":["b64toBlob","base64ArrayBuffer","arrayBuffer","base64","encodings","bytes","Uint8Array","byteLength","byteRemainder","mainLength","a","b","c","d","chunk","i","openNewTab","response","contentType","sliceSize","byteCharacters","atob","byteArrays","offset","length","slice","byteNumbers","Array","charCodeAt","byteArray","push","blob","Blob","type","blobUrl","URL","createObjectURL","handleConvertByteArrayToPdf","byteArr","alert","data","toString","trim","replace","arrData","JSON","parse"],"mappings":"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","sourcesContent":["import b64toBlob from \"b64-to-blob\";\n\nexport const base64ArrayBuffer = (arrayBuffer) => {\n  var base64 = \"\";\n  var encodings =\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n  var bytes = new Uint8Array(arrayBuffer);\n  var byteLength = bytes.byteLength;\n  var byteRemainder = byteLength % 3;\n  var mainLength = byteLength - byteRemainder;\n\n  var a, b, c, d;\n  var chunk;\n\n  // Main loop deals with bytes in chunks of 3\n  for (var i = 0; i < mainLength; i = i + 3) {\n    // Combine the three bytes into a single integer\n    chunk = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];\n\n    // Use bitmasks to extract 6-bit segments from the triplet\n    a = (chunk & 16515072) >> 18; // 16515072 = (2^6 - 1) << 18\n    b = (chunk & 258048) >> 12; // 258048   = (2^6 - 1) << 12\n    c = (chunk & 4032) >> 6; // 4032     = (2^6 - 1) << 6\n    d = chunk & 63; // 63       = 2^6 - 1\n\n    // Convert the raw binary segments to the appropriate ASCII encoding\n    base64 += encodings[a] + encodings[b] + encodings[c] + encodings[d];\n  }\n\n  // Deal with the remaining bytes and padding\n  if (byteRemainder === 1) {\n    chunk = bytes[mainLength];\n\n    a = (chunk & 252) >> 2; // 252 = (2^6 - 1) << 2\n\n    // Set the 4 least significant bits to zero\n    b = (chunk & 3) << 4; // 3   = 2^2 - 1\n\n    base64 += encodings[a] + encodings[b] + \"==\";\n  } else if (byteRemainder === 2) {\n    chunk = (bytes[mainLength] << 8) | bytes[mainLength + 1];\n\n    a = (chunk & 64512) >> 10; // 64512 = (2^6 - 1) << 10\n    b = (chunk & 1008) >> 4; // 1008  = (2^6 - 1) << 4\n\n    // Set the 2 least significant bits to zero\n    c = (chunk & 15) << 2; // 15    = 2^4 - 1\n\n    base64 += encodings[a] + encodings[b] + encodings[c] + \"=\";\n  }\n\n  return base64;\n};\n\nconst openNewTab = (response) => {\n  var contentType = \"application/pdf\";\n  var sliceSize = 512;\n\n  var byteCharacters = atob(response);\n  var byteArrays = [];\n\n  for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n    var slice = byteCharacters.slice(offset, offset + sliceSize);\n\n    var byteNumbers = new Array(slice.length);\n    for (var i = 0; i < slice.length; i++) {\n      byteNumbers[i] = slice.charCodeAt(i);\n    }\n\n    var byteArray = new Uint8Array(byteNumbers);\n\n    byteArrays.push(byteArray);\n  }\n\n  var blob = new Blob(byteArrays, { type: contentType });\n  blob = b64toBlob(response, contentType);\n  var blobUrl = URL.createObjectURL(blob);\n  return blobUrl;\n};\n\nexport const handleConvertByteArrayToPdf = (byteArr) => {\n  if (byteArr === \"\") {\n    alert(\"Input must not be empty !\");\n  } else {\n    \n    let data = byteArr.toString().trim().replace(/ /g, \"\");\n    data.replace(/\\r?\\n|\\r/g, \"\");\n    let arrData = JSON.parse(\"[\" + data + \"]\");\n    const base64 = base64ArrayBuffer(arrData);\n    return openNewTab(base64);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}