{"ast":null,"code":"var _jsxFileName = \"/home/ductran/Desktop/CSC480-21F/frontend/src/main/frontend/src/components/CustomizedTables.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Paper from \"@mui/material/Paper\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport { primaryColor, darkColor, grayColor, greenColor, whiteColor, blueColor } from \"../styles/Style\";\nimport { borderRadius, Box } from \"@mui/system\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function StickyHeadTable({\n  jsonData\n}) {\n  _s();\n\n  console.log(jsonData);\n  const [arrayData, setarrayData] = useState([]);\n  useEffect(() => {\n    var result = [];\n\n    for (var i in jsonData) {\n      var row = [];\n\n      for (var j in jsonData[i]) {\n        row.push(jsonData[i][j]);\n      }\n\n      result.push(row);\n    }\n\n    setarrayData(result);\n  }, [jsonData]);\n  console.log(arrayData);\n  const label_1 = [{\n    id: \"name\",\n    label: \"Team Name\",\n    align: \"center\",\n    width: 20\n  }];\n  const label_2 = [{\n    id: \"avggradereceived\",\n    label: \"Avg Grade RECEIVED\",\n    align: \"center\",\n    width: 20\n  }];\n  const headers = arrayData.map((index, i) => {\n    return {\n      key: i,\n      id: index[0],\n      label: index[0],\n      width: 20,\n      align: \"center\",\n      format: value => value.toLocaleString(\"en-US\")\n    };\n  });\n  const columns = label_1.concat(headers);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      width: \"100%\"\n    },\n    children: /*#__PURE__*/_jsxDEV(TableContainer, {\n      sx: {\n        maxHeight: 440\n      },\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        stickyHeader: true,\n        \"aria-label\": \"sticky table\",\n        size: \"small\",\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: columns.map((column, indexCol) => {\n              let bgColor;\n              let color;\n\n              if (indexCol == columns.length - 1) {\n                bgColor = greenColor;\n                color = whiteColor;\n              } else {\n                bgColor = grayColor;\n                color = darkColor;\n              }\n\n              return /*#__PURE__*/_jsxDEV(TableCell, {\n                align: column.align,\n                style: {\n                  width: \"10px\",\n                  height: \"10px\",\n                  border: \"0.01px solid #000\",\n                  backgroundColor: bgColor,\n                  color: color\n                },\n                children: column.label\n              }, column.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 68,\n                columnNumber: 24\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: arrayData.map((row, indexRow) => {\n            return /*#__PURE__*/_jsxDEV(TableRow, {\n              hover: true,\n              role: \"checkbox\",\n              tabIndex: -1,\n              style: {\n                width: \"10px\",\n                height: \"10px\"\n              },\n              children: columns.map((column, indexCol) => {\n                let value = row[indexCol];\n                let bgColor;\n                let color;\n                {\n                  if (indexCol == indexRow + 1 || indexCol == 0 && indexRow != arrayData.length - 1) {\n                    bgColor = primaryColor;\n                  } else {\n                    if (indexCol == columns.length - 1 && indexRow != arrayData.length - 1) {\n                      bgColor = greenColor;\n                      color = whiteColor;\n                    } else {\n                      if (indexRow == arrayData.length - 1 && indexCol != columns.length - 1) {\n                        bgColor = blueColor;\n                        color = whiteColor;\n                      } else {\n                        bgColor = whiteColor;\n                      }\n                    }\n                  }\n                }\n                return /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: column.align,\n                  style: {\n                    width: \"10px\",\n                    height: \"10px\",\n                    color: color,\n                    backgroundColor: bgColor,\n                    border: \"0.01px solid #000\"\n                  },\n                  children: value != 0 ? value : \"\"\n                }, column.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 116,\n                  columnNumber: 25\n                }, this);\n              })\n            }, row.code, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 19\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n\n_s(StickyHeadTable, \"4hRVDvO2KATdsAJQvjUnMQnHXC0=\");\n\n_c = StickyHeadTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"StickyHeadTable\");","map":{"version":3,"sources":["/home/ductran/Desktop/CSC480-21F/frontend/src/main/frontend/src/components/CustomizedTables.js"],"names":["React","useState","useEffect","Paper","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","primaryColor","darkColor","grayColor","greenColor","whiteColor","blueColor","borderRadius","Box","StickyHeadTable","jsonData","console","log","arrayData","setarrayData","result","i","row","j","push","label_1","id","label","align","width","label_2","headers","map","index","key","format","value","toLocaleString","columns","concat","maxHeight","column","indexCol","bgColor","color","length","height","border","backgroundColor","indexRow","code"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,YAAT,EAAuBC,SAAvB,EAAkCC,SAAlC,EAA6CC,UAA7C,EAAyDC,UAAzD,EAAqEC,SAArE,QAAsF,iBAAtF;AACA,SAASC,YAAT,EAAuBC,GAAvB,QAAkC,aAAlC;;AAEA,eAAe,SAASC,eAAT,CAAyB;AAACC,EAAAA;AAAD,CAAzB,EAAqC;AAAA;;AAClDC,EAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACA,QAAM,CAACG,SAAD,EAAYC,YAAZ,IAA4BtB,QAAQ,CAAC,EAAD,CAA1C;AACAC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIsB,MAAM,GAAG,EAAb;;AACA,SAAI,IAAIC,CAAR,IAAaN,QAAb,EAAsB;AACpB,UAAIO,GAAG,GAAG,EAAV;;AACA,WAAI,IAAIC,CAAR,IAAaR,QAAQ,CAACM,CAAD,CAArB,EAAyB;AACvBC,QAAAA,GAAG,CAACE,IAAJ,CAAST,QAAQ,CAACM,CAAD,CAAR,CAAYE,CAAZ,CAAT;AACD;;AACDH,MAAAA,MAAM,CAACI,IAAP,CAAYF,GAAZ;AACD;;AACDH,IAAAA,YAAY,CAACC,MAAD,CAAZ;AACH,GAVQ,EAUN,CAACL,QAAD,CAVM,CAAT;AAWAC,EAAAA,OAAO,CAACC,GAAR,CAAYC,SAAZ;AAEA,QAAMO,OAAO,GAAG,CACd;AAAEC,IAAAA,EAAE,EAAE,MAAN;AAAcC,IAAAA,KAAK,EAAE,WAArB;AAAkCC,IAAAA,KAAK,EAAE,QAAzC;AAAmDC,IAAAA,KAAK,EAAE;AAA1D,GADc,CAAhB;AAGA,QAAMC,OAAO,GAAG,CACd;AACEJ,IAAAA,EAAE,EAAE,kBADN;AAEEC,IAAAA,KAAK,EAAE,oBAFT;AAGEC,IAAAA,KAAK,EAAE,QAHT;AAIEC,IAAAA,KAAK,EAAE;AAJT,GADc,CAAhB;AAQA,QAAME,OAAO,GAAGb,SAAS,CAACc,GAAV,CAAc,CAACC,KAAD,EAAQZ,CAAR,KAAc;AAC1C,WAAO;AACLa,MAAAA,GAAG,EAAEb,CADA;AAELK,MAAAA,EAAE,EAAEO,KAAK,CAAC,CAAD,CAFJ;AAGLN,MAAAA,KAAK,EAAEM,KAAK,CAAC,CAAD,CAHP;AAILJ,MAAAA,KAAK,EAAE,EAJF;AAKLD,MAAAA,KAAK,EAAE,QALF;AAMLO,MAAAA,MAAM,EAAGC,KAAD,IAAWA,KAAK,CAACC,cAAN,CAAqB,OAArB;AANd,KAAP;AAQD,GATe,CAAhB;AAWA,QAAMC,OAAO,GAAGb,OAAO,CAACc,MAAR,CAAeR,OAAf,CAAhB;AACA,sBACE,QAAC,GAAD;AAAK,IAAA,EAAE,EAAE;AAAEF,MAAAA,KAAK,EAAE;AAAT,KAAT;AAAA,2BACE,QAAC,cAAD;AAAgB,MAAA,EAAE,EAAE;AAAEW,QAAAA,SAAS,EAAE;AAAb,OAApB;AAAA,6BACE,QAAC,KAAD;AAAO,QAAA,YAAY,MAAnB;AAAoB,sBAAW,cAA/B;AAA8C,QAAA,IAAI,EAAC,OAAnD;AAAA,gCACE,QAAC,SAAD;AAAA,iCACE,QAAC,QAAD;AAAA,sBACGF,OAAO,CAACN,GAAR,CAAY,CAACS,MAAD,EAASC,QAAT,KAAsB;AACjC,kBAAIC,OAAJ;AACA,kBAAIC,KAAJ;;AACA,kBAAIF,QAAQ,IAAIJ,OAAO,CAACO,MAAR,GAAiB,CAAjC,EAAoC;AAClCF,gBAAAA,OAAO,GAAGlC,UAAV;AACAmC,gBAAAA,KAAK,GAAGlC,UAAR;AACD,eAHD,MAII;AACFiC,gBAAAA,OAAO,GAAGnC,SAAV;AACAoC,gBAAAA,KAAK,GAAGrC,SAAR;AACD;;AACD,kCAAO,QAAC,SAAD;AAEL,gBAAA,KAAK,EAAEkC,MAAM,CAACb,KAFT;AAGL,gBAAA,KAAK,EAAE;AACLC,kBAAAA,KAAK,EAAE,MADF;AAELiB,kBAAAA,MAAM,EAAE,MAFH;AAGLC,kBAAAA,MAAM,EAAE,mBAHH;AAILC,kBAAAA,eAAe,EAAEL,OAJZ;AAKLC,kBAAAA,KAAK,EAAEA;AALF,iBAHF;AAAA,0BAWJH,MAAM,CAACd;AAXH,iBACAc,MAAM,CAACf,EADP;AAAA;AAAA;AAAA;AAAA,sBAAP;AAaD,aAxBA;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eA8BE,QAAC,SAAD;AAAA,oBACGR,SAAS,CACPc,GADF,CACM,CAACV,GAAD,EAAM2B,QAAN,KAAmB;AACtB,gCACE,QAAC,QAAD;AAAU,cAAA,KAAK,MAAf;AAAgB,cAAA,IAAI,EAAC,UAArB;AAAgC,cAAA,QAAQ,EAAE,CAAC,CAA3C;AAA6D,cAAA,KAAK,EAAE;AAClEpB,gBAAAA,KAAK,EAAE,MAD2D;AAElEiB,gBAAAA,MAAM,EAAE;AAF0D,eAApE;AAAA,wBAGGR,OAAO,CAACN,GAAR,CAAY,CAACS,MAAD,EAASC,QAAT,KAAsB;AACjC,oBAAIN,KAAK,GAAGd,GAAG,CAACoB,QAAD,CAAf;AACA,oBAAIC,OAAJ;AACA,oBAAIC,KAAJ;AACA;AACE,sBAAGF,QAAQ,IAAIO,QAAQ,GAAG,CAAvB,IAA4BP,QAAQ,IAAI,CAAZ,IAAiBO,QAAQ,IAAI/B,SAAS,CAAC2B,MAAV,GAAmB,CAA/E,EAAiF;AAC/EF,oBAAAA,OAAO,GAAGrC,YAAV;AACD,mBAFD,MAGK;AACH,wBAAIoC,QAAQ,IAAIJ,OAAO,CAACO,MAAR,GAAiB,CAA7B,IAAkCI,QAAQ,IAAI/B,SAAS,CAAC2B,MAAV,GAAmB,CAArE,EAAwE;AACtEF,sBAAAA,OAAO,GAAGlC,UAAV;AACAmC,sBAAAA,KAAK,GAAGlC,UAAR;AACD,qBAHD,MAIK;AACH,0BAAIuC,QAAQ,IAAI/B,SAAS,CAAC2B,MAAV,GAAmB,CAA/B,IAAoCH,QAAQ,IAAIJ,OAAO,CAACO,MAAR,GAAiB,CAArE,EAAwE;AACtEF,wBAAAA,OAAO,GAAGhC,SAAV;AACAiC,wBAAAA,KAAK,GAAGlC,UAAR;AACD,uBAHD,MAIK;AACHiC,wBAAAA,OAAO,GAAGjC,UAAV;AACD;AACF;AACF;AACF;AACD,oCACE,QAAC,SAAD;AAEE,kBAAA,KAAK,EAAE+B,MAAM,CAACb,KAFhB;AAGE,kBAAA,KAAK,EAAE;AACLC,oBAAAA,KAAK,EAAE,MADF;AAELiB,oBAAAA,MAAM,EAAE,MAFH;AAGLF,oBAAAA,KAAK,EAAEA,KAHF;AAILI,oBAAAA,eAAe,EAAEL,OAJZ;AAKLI,oBAAAA,MAAM,EAAE;AALH,mBAHT;AAAA,4BAWGX,KAAK,IAAI,CAAT,GAAaA,KAAb,GAAqB;AAXxB,mBACOK,MAAM,CAACf,EADd;AAAA;AAAA;AAAA;AAAA,wBADF;AAeD,eAvCA;AAHH,eAAmDJ,GAAG,CAAC4B,IAAvD;AAAA;AAAA;AAAA;AAAA,oBADF;AA8CD,WAhDF;AADH;AAAA;AAAA;AAAA;AAAA,gBA9BF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAwFD;;GA/HuBpC,e;;KAAAA,e","sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport Paper from \"@mui/material/Paper\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport { primaryColor, darkColor, grayColor, greenColor, whiteColor, blueColor } from \"../styles/Style\";\nimport { borderRadius, Box } from \"@mui/system\";\n\nexport default function StickyHeadTable({jsonData}) {\n  console.log(jsonData)\n  const [arrayData, setarrayData] = useState([]);\n  useEffect(() => {\n      var result = [];\n      for(var i in jsonData){\n        var row = [];\n        for(var j in jsonData[i]){\n          row.push(jsonData[i][j]);\n        }\n        result.push(row)\n      }\n      setarrayData(result)\n  }, [jsonData])\n  console.log(arrayData)\n\n  const label_1 = [\n    { id: \"name\", label: \"Team Name\", align: \"center\", width: 20 },\n  ];\n  const label_2 = [\n    {\n      id: \"avggradereceived\",\n      label: \"Avg Grade RECEIVED\",\n      align: \"center\",\n      width: 20,\n    },\n  ];\n  const headers = arrayData.map((index, i) => {\n    return {\n      key: i,\n      id: index[0],\n      label: index[0],\n      width: 20,\n      align: \"center\",\n      format: (value) => value.toLocaleString(\"en-US\"),\n    };\n  });\n\n  const columns = label_1.concat(headers);\n  return (\n    <Box sx={{ width: \"100%\"}}>\n      <TableContainer sx={{ maxHeight: 440 }}>\n        <Table stickyHeader aria-label=\"sticky table\" size=\"small\">\n          <TableHead>\n            <TableRow >\n              {columns.map((column, indexCol) => {\n                let bgColor;\n                let color;\n                if (indexCol == columns.length - 1) {\n                  bgColor = greenColor\n                  color = whiteColor\n                }\n                else{\n                  bgColor = grayColor\n                  color = darkColor\n                }\n                return <TableCell\n                  key={column.id}\n                  align={column.align}\n                  style={{\n                    width: \"10px\",\n                    height: \"10px\",\n                    border: \"0.01px solid #000\",\n                    backgroundColor: bgColor,\n                    color: color,\n                  }}\n                >\n                  {column.label}\n                </TableCell>\n              })}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {arrayData\n              .map((row, indexRow) => {\n                return (\n                  <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code} style={{\n                    width: \"10px\",\n                    height: \"10px\"}}>\n                    {columns.map((column, indexCol) => {\n                      let value = row[indexCol];\n                      let bgColor;\n                      let color;\n                      {\n                        if(indexCol == indexRow + 1 || indexCol == 0 && indexRow != arrayData.length - 1){\n                          bgColor = primaryColor\n                        }\n                        else {\n                          if (indexCol == columns.length - 1 && indexRow != arrayData.length - 1) {\n                            bgColor = greenColor\n                            color = whiteColor\n                          }\n                          else {\n                            if (indexRow == arrayData.length - 1 && indexCol != columns.length - 1) {\n                              bgColor = blueColor\n                              color = whiteColor\n                            }\n                            else {\n                              bgColor = whiteColor\n                            }\n                          }\n                        }\n                      }\n                      return (\n                        <TableCell\n                          key={column.id}\n                          align={column.align}\n                          style={{\n                            width: \"10px\",\n                            height: \"10px\",\n                            color: color,\n                            backgroundColor: bgColor,\n                            border: \"0.01px solid #000\",\n                          }}\n                        >\n                          {value != 0 ? value : \"\"}\n                        </TableCell>\n                      );\n                    })}\n                  </TableRow>\n                );\n              })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Box>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}